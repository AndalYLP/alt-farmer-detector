"""
RobloxPy._common.thumbnails
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Common module for thumbnails.
"""

from typing import Optional

from .._utils.requests import _ThumbnailsAPI


class Thumbnails:
    class ThumbnailBatchObject:
        """
        ### Types:
        1. Avatar
        2. AvatarHeadShot
        3. GameIcon
        4. BadgeIcon
        5. GameThumbnail
        6. GamePass
        7. Asset
        8. BundleThumbnail
        9. Outfit
        10. GroupIcon
        11. DeveloperProduct
        12. AutoGeneratedAsset
        13. AvatarBust
        14. PlaceIcon
        15. AutoGeneratedGameIcon
        16. ForceAutoGeneratedGameIcon
        17. Look
        """

        def __init__(
            self,
            requestId: str = None,
            targetId: int = None,
            token: str = None,
            alias: str = None,
            type: str = "AvatarHeadShot",
            size: str = "48x48",
            format: str = "png",
            isCircular: bool = False,
        ):
            self.requestId = requestId
            self.targetId = targetId
            self.token = token
            self.alias = alias
            self.type = type
            self.size = size
            self.format = format
            self.isCircular = isCircular

        def json(self):
            names = [
                "requestId",
                "targetId",
                "token",
                "alias",
                "type",
                "size",
                "format",
                "isCircular",
            ]

            return {name: getattr(self, name) for name in names if getattr(self, name)}

    class BatchObject:
        """
        ### You are probably searching for ThumbnailBatchObject!
        """

        def __init__(self, data: list):
            self.data = data
            self.thumbnails = [
                Thumbnails.ThumbnailObject(thumbnail) for thumbnail in data
            ]
            self._imageUrlDict: dict[str, Thumbnails.ThumbnailObject] = {
                thumbnail.imageUrl: thumbnail for thumbnail in self.thumbnails
            }
            self._requestIdDict: dict[int, Thumbnails.ThumbnailObject] = {
                thumbnail.requestId: thumbnail for thumbnail in self.thumbnails
            }
            self._targetIdDict: dict[str, Thumbnails.ThumbnailObject] = {
                thumbnail.targetId: thumbnail for thumbnail in self.thumbnails
            }

        def __contains__(self, item):
            if isinstance(item, Thumbnails.ThumbnailObject):
                return item in self.thumbnails

            return False

        def __bool__(self):
            return bool(self.thumbnails)

        def __len__(self):
            return len(self.thumbnails)

        def __eq__(self, other):
            if isinstance(other, Thumbnails.BatchObject):
                return set(self.thumbnails) == set(other.thumbnails)

            return False

        def __add__(self, other):
            if isinstance(other, Thumbnails.BatchObject):
                return Thumbnails.BatchObject(
                    list(dict.fromkeys([*self.data, *other.data]))
                )
            elif isinstance(other, Thumbnails.ThumbnailObject):
                return Thumbnails.BatchObject(
                    list(dict.fromkeys([*self.data, other.data]))
                )

            return NotImplemented

        def __iadd__(self, other):
            if isinstance(other, Thumbnails.BatchObject):
                return Thumbnails.BatchObject(
                    list(dict.fromkeys([*self.data, *other.data]))
                )
            elif isinstance(other, Thumbnails.ThumbnailObject):
                return Thumbnails.BatchObject(
                    list(dict.fromkeys([*self.data, other.data]))
                )

            return NotImplemented

        def __sub__(self, other):
            if isinstance(other, Thumbnails.BatchObject):
                for value in other.data:
                    self.data.remove(value)

                return Thumbnails.BatchObject(self.data)
            elif isinstance(other, Thumbnails.ThumbnailObject):
                self.data.remove(other.data)

                return Thumbnails.BatchObject(self.data)

            return NotImplemented

        def get_by_imageurl(self, url: str) -> Optional["Thumbnails.ThumbnailObject"]:
            return self._imageUrlDict.get(url)

        def get_by_requestid(
            self, requestId: str
        ) -> Optional["Thumbnails.ThumbnailObject"]:
            return self._requestIdDict.get(requestId)

        def get_by_targetid(
            self, targetId: int
        ) -> Optional["Thumbnails.ThumbnailObject"]:
            return self._targetIdDict.get(targetId)

        def get_all_imageurls(self) -> dict[str | int, str]:
            """
            Gives a dictionary mapping requestId or TargetId to their corresponding imageUrl.

            ## Format:
                dict: A dictionary where the keys are requestIds or targetIds (str | int) and the values are imageUrls (str).

            """

            return {
                (thumbnail.requestId or thumbnail.targetId): thumbnail.imageUrl
                for thumbnail in self.thumbnails
            }

    class ThumbnailObject:
        def __init__(self, data: dict):
            self.data = data

            self.requestId = data.get("requestId")
            self.imageUrl = data["imageUrl"]
            self.targetId = data["targetId"]

            self.state = data["state"]
            errorMessage = data.get("errorMessage", False)
            self.error: str | bool = errorMessage if errorMessage != "" else False

        def __bool__(self):
            return bool(self.imageUrl)

        def __eq__(self, other):
            if isinstance(other, Thumbnails.ThumbnailObject):
                return self.imageUrl == other.imageUrl

            return False

        def __add__(self, other) -> "Thumbnails.BatchObject":
            if isinstance(other, Thumbnails.ThumbnailObject):
                return Thumbnails.BatchObject([self.data, other.data])
            elif isinstance(other, Thumbnails.BatchObject):
                return Thumbnails.BatchObject(
                    list(dict.fromkeys([self.data, *other.data]))
                )

            return NotImplemented

        def __iadd__(self, other) -> "Thumbnails.BatchObject":
            if isinstance(other, Thumbnails.ThumbnailObject):
                return Thumbnails.BatchObject([self.data, other.data])
            elif isinstance(other, Thumbnails.BatchObject):
                return Thumbnails.BatchObject(
                    list(dict.fromkeys([self.data, *other.data]))
                )

            return NotImplemented


def get_users_avatar(
    *userIds: int,
    type: str = "headshot",
    size: str = "48x48",
    format: str = "Png",
    isCircular: bool = False,
) -> Thumbnails.BatchObject:
    response = _ThumbnailsAPI.V1.Avatar.users_avatar__(
        *userIds, type=type, size=size, format=format, isCircular=isCircular
    )
    responseJson = response.json()

    data: list = responseJson["data"]

    for id in userIds:
        if not next(
            (thumbnail for thumbnail in data if thumbnail["targetId"] == id), None
        ):
            data.append(
                {
                    "targetId": id,
                    "errorMessage": "Didn't find thumbnail data.",
                    "state": "Error",
                    "imageUrl": None,
                }
            )

    return Thumbnails.BatchObject(data)


async def batch(
    *batchObjects: Thumbnails.ThumbnailBatchObject,
) -> Thumbnails.BatchObject:
    data = await _ThumbnailsAPI.V1.Batch.batch(
        *[batchObject.json() for batchObject in batchObjects]
    )

    return Thumbnails.BatchObject(data)
